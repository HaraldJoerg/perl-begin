#include '../template.wml'

<latemp_subject "Text Generation in Perl" />

<h2 id="intro">Introduction</h2>

<p>
Perl is a good language for generating text, and
even its name originally stood for "Practical Extraction and <b>Report</b>
Language". This page aims to list some of the facilities provided by Perl
and <a href="$(ROOT)/topics/cpan/">CPAN</a> for generating text.
</p>

<h2 id="facilities">Text Generation Facilities</h2>

<h3 id="concatenation">String Concatenation</h3>

<p>
Perl allows you to easily concatenate two strings using the <tt>.</tt>
and <tt>.=</tt> operators. While you can quickly outgrow it, it is often
enough. You can also <b>interpolate</b> string values inside some types
of string constants. Therefore, you can say:
</p>

<pre>
my $name = "Sophie";
my $city = "London";
my $large_string = "Hello $name, welcome to $city!";
\# $large_string is now "Hello Sophie, welcome to London!"
</pre>

<p>
You can also interpolate array elements and hash keys:
</p>

<pre>
my @colors = ("Red", "Orange", "Yellow", "Green", "Indigo", "Blue", "Violet");
my %capitals = (
    "France" =&gt; "Paris",
    "Germany" =&gt; "Berlin",
    "Spain" =&gt; "Madrid",
    "Japan" =&gt; "Tokyo",
);

print "Japan has a flag with a $colors[0] circle, and a its capital is $capitals{Japan}\n";
</pre>

<p>
Furthermore, one can interpolate more complex expressions using 
<a href="http://www.catonmat.net/blog/secret-perl-operators/#turtle">the
turtle operator</a> - <tt>@{[]}</tt>, although if you're resorting to doing
it, you should probably use the more advanced techniques below:
</p>

<pre>
\#!/usr/bin/perl

use strict;
use warnings;

print "Please enter a number:\n";
my $n = &lt;&gt;;
chomp($n);

my $string = "$n is @{[($n % 2 == 0) ? 'even' : 'odd' ]}";

print "$string\n";
</pre>

<p>
Perl also gives you a large selection of delimiters for strings as well as
<a href="http://en.wikipedia.org/wiki/Here_document">here-documents</a>,
which allow assigning multiple-line string constants with a user-specified
terminating delimiter.
</p>

<p>
Nevertheless, please <b>read on</b> to see what other and often better
options exist.
</p>

<h3 id="sprintf"><a href="http://perldoc.perl.org/functions/sprintf.html">sprintf()</a></h3>

<p>
sprintf() is a built-in Perl function for formatting its arguments, similar
to the sprintf function provided by C and other programming languages. Make
sure you familiarize yourself with it.
</p>

<h4 id="named-sprintf"><a href="http://search.cpan.org/dist/Text-Sprintf-Named/">Text-Sprintf-Named</a></h4>

<p>
Text-Sprintf-Named allows one to pass an associative array to a sprintf-like
function with named conversions. So one can do:
</p>

<pre>
my $formatter =
    Text::Sprintf::Named-&gt;new(
        {fmt =&gt; &quot;Hello %(name)s! Today is %(day)s!&quot;}
    );

# Returns &quot;Hello Ayeleth! Today is Sunday!&quot;
$formatter-&gt;format({args =&gt; {&#39;name&#39; =&gt; &quot;Ayeleth&quot;, &#39;day&#39; =&gt; &quot;Sunday&quot;}});
</pre>

<h3 id="template-toolkit"><a href="http://template-toolkit.org/">Template
Toolkit</a></h3>

<p>
Template Toolkit is a sophisticated and powerful templating system for Perl,
with many extensions on the CPAN. Also see 
<a href="http://www.shlomifish.org/lecture/Perl/Template-Toolkit/">a
presentation that Shlomi Fish gave</a> about Template Toolkit, that explains
why one should use a template system and especially Template Toolkit.  
</p>

<h3 id="perl6-form"><a href="http://search.cpan.org/dist/Perl6-Form/">Perl6-Form</a></h3>

<p>
A module for formatting fixed-width text. You should use it <b>instead</b> of
the built-in <a href="http://perldoc.perl.org/perlform.html">perlform</a>
facility.
</p>

<h3 id="text-table"><a href="http://search.cpan.org/dist/Text-Table/">Text::Table</a></h3>

<p>
A CPAN module for outputting text tables.
</p>

<h3 id="xml-writer"><a href="http://search.cpan.org/dist/XML-Writer/">XML-Writer</a></h3>

<p>
A convenient CPAN module for outputting XML.
</p>

