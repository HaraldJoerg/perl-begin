[%- SET title = "Perl for Multitasking and Networking" -%]
[%- PROCESS "blocks.tt2" -%]
[%- WRAPPER wrap_html -%]

[%- SET sect_class = "ss" -%]

[% WRAPPER h2_section id = "intro" title = "Introduction" %]

<p>
In multitasking, the program performs several tasks at once. Multitasking
is closely related to networking where we have to handle several events
or serve several clients at once.
</p>

[% END %]

[% WRAPPER h2_section id = "technologies" title = "Technologies of Interest" %]

[% WRAPPER h3_section id = "ipc-run" title = ( cpan.self_dist( "d" => "IPC-Run", ) ) %]

<p>
A module that allows one to run background processes with piping, and ptys.
Works on UNIXes as well as Windows.
</p>

[% END %]

[% WRAPPER h3_section id = "expect" title = ( cpan.self_dist( "d" => "Expect", ) ) %]

<p>
Allows one to control a terminal application interactively and wait for
events.
</p>

[% END %]

[% WRAPPER h3_section id = "Parallel-ForkManager" title = ( ( cpan.self_dist( "d" => "Parallel-Map", ) ) _ " and " _ ( cpan.self_dist( "d" => "Parallel-ForkManager", ) ) ) %]

<p>
Provide simple ways to parallelise tasks. Also see
[% cpan.self_dist( "d" => "Parallel-Map-Segmented", ) %] and
[% cpan.self_dist( "d" => "Parallel-ForkManager-Segmented", ) %].
</p>

[% END %]

[% WRAPPER h3_section id = "event_frameworks" title = "Event Driven Programming Frameworks" %]

<p>
There are several frameworks available for event driven programming,
cooperative multitasking and writing network applications. You can find the
most important and most recommended ones on
<a href="[% base_path %]topics/cpan/">CPAN</a>. Here is a list of some of the
most recommended ones.
</p>

[% WRAPPER h4_section id = "poe" title = "POE: Perl Object Environment" href = "http://poe.perl.org/" %]

<p>
POE was one of the first event-driven programming frameworks for Perl,
and gained some popularity in part due to lack of alternatives. Its style
is baroque and as such it may no longer be recommended.
</p>

[% END %]

[% WRAPPER h4_section id = "IO-Async" title = ( cpan.self_dist( "d" => "IO-Async", ) ) %]

<p>
A popular framework for asynchronous events on CPAN.
</p>

[% END %]

[% WRAPPER h4_section id = "discouraged_event_frameworks" title = "Discouraged Event Frameworks" %]

[% WRAPPER h5_section id = "AnyEvent" title = ( cpan.self_dist( "d" => "AnyEvent", ) ) %]

<p>
<b>Note:</b> Using AnyEvent [% cpan.module(m=>"Perl::Critic::Policy::Freenode::DiscouragedModules",body=>"is discouraged") %].
</p>

<p>
AnyEvent is a more modern eventsâ€™ framework and allows one to make use of
extensions for other frameworks. It is also fast.
</p>

<ul>
<li>
<p>
<a href="http://www.slideshare.net/xSawyer/async-programmingftwanyevent">Asynchronous
Programming For-the-Win!</a> - by Sawyer X. Slides for a talk with some
examples.
</p>
</li>
</ul>

[% END %]

[% END %]

[% END %]

[% END %]

[% WRAPPER h2_section id = "threads" title = "Threads?" %]

<p>
Many people are tempted to use threads with Perl and Internet forums are
constantly frequented for help with threads in Perl. However, the use of
threads in Perl is not recommended:
</p>

<ul>

<li>
Elizabeth Mattijsen has written
<a href="http://www.perlmonks.org/index.pl?node_id=288022">an essay about
the problems with threads in Perl</a> on Perlmonks.
</li>

<li>
<a href="http://perldoc.perl.org/perlthrtut.html">See perlthrtut</a> for
more information.
</li>

</ul>

[% END %]

[% END %]
